

-----play strategies:
 how to build a decent playing strategy?
 should human players plug in as a strategy?
 learn about mixins in groovy (is that the same as traits?):  should Strategy be mixed in to Player?

------
 it's clear that player.hand(), round, and validCards or any set of cards for that matter
   should all be of the same type and have methods such as "highest"

   TestStrategy should be able to do, instead of:
       round.highest(validCards)
   this:
   validCards.highest()

   and in Player.validCards implementation, instead of:

   hand.findAll { card ->
           card.suit == round.atout
         }

   should be able to say hand.cardsMatchingSuit(suit)
   which already exists on Round.  so abstract these methods out of round as a trait that can apply to anything
   that is (or perhaps has) a set of cards.  Round has cards.  Player has a hand. etc..

----logging as cross-cutting concern:
- perhaps should be a publish/subscribe model
..where game engine publishes events that update a user interface

-- research pubsub in groovy

-----fsm's
 - look into fsm's in groovy
 - build out fsm for game, partie?
 - flesh out the development of a hand, and the play of a hand in turns
 - flesh out the envoi selection process/phase:
   first selection round, second, fact that game may end without any hands played if no one envoie's


----ui:
- in the other direction, calls into the engine move it from state to state
  can be command line, remote, etc..

button -> begin partie
button -> start game
button -> envoie/pass
button:  play card x
some buttons will be disabled.  e.g. player 2 cannot play card x if it's not their turn
also player 2 can play only from valid cardset.

-----logging wording:
 make card placement log wording to be semantic:  "Eitan cuts with .."
  or "Johnny follows suit with .."
  or "Corinne montes with .."

 likewise, should state at end of each game "stat" such as:
  - team x wins after having committed to trefle

-----handle belotte rebelotte

-----play strategies:
 introduce a more intelligent strategy and try it out for an ai
 then setup three ai's and play with them to see how well this works out.
 or.. come up with an algorithm to teach behavior based on desired outcomes.
